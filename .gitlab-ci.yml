# GitLab CI/CD Pipeline Configuration

stages:
  - build
  - test
  - deploy

variables:
  DOCKER_REGISTRY: "registry.gitlab.com/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}"
  DOCKER_IMAGE: "${DOCKER_REGISTRY}/ai-code-generator"
  KUBERNETES_NAMESPACE: "ai-applications"

# Cache dependencies between jobs
cache:
  paths:
    - .pip-cache/

# Build stage: Build and test the application
build:
  stage: build
  image: python:3.9-slim
  script:
    - pip install --cache-dir=.pip-cache -r requirements.txt
    - echo "Running linting checks"
    - pip install flake8
    - flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
  artifacts:
    paths:
      - .
    expire_in: 1 hour

# Test stage: Run unit tests
test:
  stage: test
  image: python:3.9-slim
  script:
    - pip install --cache-dir=.pip-cache -r requirements.txt
    - pip install pytest
    - echo "Running unit tests"
    - pytest -v
  dependencies:
    - build

# Build Docker image
docker-build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $DOCKER_REGISTRY
    - docker build -t $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA -t $DOCKER_IMAGE:latest .
    - docker push $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $DOCKER_IMAGE:latest
  only:
    - main
    - master

# Deploy to Kubernetes
deploy-kubernetes:
  stage: deploy
  image: bitnami/kubectl:latest
  script:
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig.yaml
    - export KUBECONFIG=./kubeconfig.yaml
    - kubectl config use-context my-cluster
    - kubectl set image deployment/ai-code-generator ai-code-generator=$DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA -n $KUBERNETES_NAMESPACE
    - kubectl rollout status deployment/ai-code-generator -n $KUBERNETES_NAMESPACE
    - |
      if [ $? -ne 0 ]; then
        echo "Deployment failed"
        kubectl rollout undo deployment/ai-code-generator -n $KUBERNETES_NAMESPACE
        exit 1
      fi
  environment:
    name: production
    url: https://ai-code-generator.example.com
  only:
    - main
    - master

# Create Kubernetes service if it doesn't exist
create-kubernetes-service:
  stage: deploy
  image: bitnami/kubectl:latest
  script:
    - echo "$KUBE_CONFIG" | base64 -d > kubeconfig.yaml
    - export KUBECONFIG=./kubeconfig.yaml
    - kubectl config use-context my-cluster
    - |
      if ! kubectl get service ai-code-generator -n $KUBERNETES_NAMESPACE; then
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: Service
        metadata:
          name: ai-code-generator
          namespace: $KUBERNETES_NAMESPACE
        spec:
          selector:
            app: ai-code-generator
          ports:
          - port: 80
            targetPort: 5000
          type: ClusterIP
        EOF
      fi
  only:
    - main
    - master